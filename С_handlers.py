from aiogram import types
from aiogram.dispatcher import FSMContext
import markups as mrkp
from aiogram.types import ReplyKeyboardRemove
import system

from loader import dp, bot
from states import menus, ListBuilding, ChangeList

with open('password.txt', 'r', encoding='utf-8') as password:
    pas = password.read()


@dp.message_handler(commands=[pas])
async def enter_menu(message: types.Message):
    await bot.send_message(message.chat.id, '–í—ã–±–∏—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=mrkp.mainMenu)
    await menus.menu.set()


@dp.message_handler(state=menus.menu)
async def mainMenu(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == 'üü©–ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥–µ–ª':
        await bot.send_message(message.chat.id, "–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—à–ª—ã–π —Å–ø–∏—Å–æ–∫ –¥–µ–ª, —Å–æ–∑–¥–∞–≤–∞—è –Ω–æ–≤—ã–π?",
            reply_markup=mrkp.acceptMenu)
        await menus.acceptNewList.set()

    elif answer == 'üü¶–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫':
        await message.answer(system.rectifier(), reply_markup=mrkp.mainMenu)
        await menus.menu.set()

    elif answer == 'üü•–ó–∞–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫':
        with open('SessionValidity.txt','r') as SessionValidity:
            Validity = SessionValidity.read()
        if Validity == 'True':
            await message.answer('–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫?',reply_markup=mrkp.acceptMenu)
            await menus.acceptCloseList.set()
        elif Validity == 'False':
            await message.answer('–°–ø–∏—Å–æ–∫ –¥–µ–ª —É–∂–µ –∑–∞–∫—Ä—ã—Ç!‚õî')
            await menus.menu.set()

    elif answer == 'üü®–ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫':
        with open('SessionValidity.txt','r') as SessionValidity:
            Validity = SessionValidity.read()
        if Validity == 'True':
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',reply_markup=mrkp.choice_of_change)
            await ChangeList.choice.set()
        elif Validity == 'False':
            await message.answer('–°–ø–∏—Å–æ–∫ –¥–µ–ª —É–∂–µ –∑–∞–∫—Ä—ã—Ç!‚õî')
            await menus.menu.set()

    elif answer == '-backdoor':
        await message.answer('BACKDOORED',reply_markup=ReplyKeyboardRemove())
        await state.finish()


# === NEW LIST ===
@dp.message_handler(state=menus.acceptNewList)
async def NewTask_acept(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == '‚úÖ–î–∞':
        await bot.send_message(message.from_user.id, '–°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫.\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è',
            reply_markup=ReplyKeyboardRemove())
        system.new_TaskList()
        await ListBuilding.title.set()

    elif answer == '‚ùå–û—Ç–º–µ–Ω–∞':
        await bot.send_message(message.from_user.id, '–í—ã–±–∏—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
            reply_markup=mrkp.mainMenu)
        await menus.menu.set()


@dp.message_handler(state=ListBuilding.title)
async def ListBuilding_name(message: types.Message, state: FSMContext):
    title = message.text
    await state.update_data(title=title)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –±–µ–∑ –¥–µ–≤–∞–π—Å–æ–≤ –∑–∞ –µ–≥–æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ')
    await ListBuilding.hours.set()


@dp.message_handler(state=ListBuilding.hours)
async def ListBuilding_hours(message: types.Message, state: FSMContext):
    data = await state.get_data()
    title = data.get("title")
    hours = message.text
    system.Task_reg(title,hours)
    await message.answer('–ï—â—ë –∑–∞–¥–∞–Ω–∏–µ?',reply_markup=mrkp.extension)
    await ListBuilding.cont.set()


@dp.message_handler(state=ListBuilding.cont)
async def ListBuilding_name(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == 'üîÅ–î–∞':
        await message.answer('–ù–æ–≤–æ–µ –¥–µ–ª–æ.\n–í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ',
            reply_markup=ReplyKeyboardRemove())
        await ListBuilding.title.set()
    elif answer == '‚èπ–ó–∞–∫–æ–Ω—á–∏—Ç—å —Å–ø–∏—Å–æ–∫':
        await message.answer('–°–ø–∏—Å–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!')
        await message.answer(system.rectifier(),reply_markup=mrkp.mainMenu)
        await menus.menu.set()



# === CLOSE LIST ===
@dp.message_handler(state=menus.acceptCloseList)
async def Close(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == '‚úÖ–î–∞':
        system.CloseList()
        await message.answer('–°–ø–∏—Å–æ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç!')
        await message.answer(system.rectifier(),reply_markup=mrkp.mainMenu)
        await menus.menu.set()
    elif answer == '‚ùå–û—Ç–º–µ–Ω–∞':
        await bot.send_message(message.from_user.id, '–û—Ç–º–µ–Ω–µ–Ω–æ.',
            reply_markup=mrkp.mainMenu)
        await menus.menu.set()


# === CHANGE LIST ===
@dp.message_handler(state=ChangeList.choice)
async def Choice(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == 'üìù–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ':
        await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è',
            reply_markup=ReplyKeyboardRemove())
        await ChangeList.addTask_title.set()

    elif answer == 'üóë–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–Ω–∏–µ':
        await message.answer(system.rectifier())
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å',
            reply_markup=ReplyKeyboardRemove())
        await ChangeList.delTask.set()

    elif answer == '‚ùå–û—Ç–º–µ–Ω–∞':
        await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ.',reply_markup=mrkp.mainMenu)
        await menus.menu.set()


@dp.message_handler(state=ChangeList.addTask_title)
async def AddTask_name(message: types.Message, state: FSMContext):
    title = message.text
    await state.update_data(title=title)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –±–µ–∑ –¥–µ–≤–∞–π—Å–æ–≤ –∑–∞ –µ–≥–æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ')
    await ChangeList.addTask_hours.set()


@dp.message_handler(state=ChangeList.addTask_hours)
async def AddTask_hours(message: types.Message, state: FSMContext):
    data = await state.get_data()
    title = data.get("title")
    hours = message.text
    system.Task_reg(title,hours)
    await message.answer('–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!')
    await message.answer(system.rectifier(),reply_markup=mrkp.mainMenu)
    await menus.menu.set()


@dp.message_handler(state=ChangeList.delTask)
async def DelTask(message: types.Message, state: FSMContext):
    number = message.text
    system.del_Task(number)
    await message.answer('–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!')
    await message.answer(system.rectifier(),reply_markup=mrkp.mainMenu)
    await menus.menu.set()

